{"version":3,"file":"index.cjs","sources":["../src/useObservable.ts","../src/useObservableEvent.ts"],"sourcesContent":["import {useCallback, useMemo, useSyncExternalStore} from 'react'\nimport {\n  asapScheduler,\n  catchError,\n  finalize,\n  type Observable,\n  type ObservedValueOf,\n  of,\n  share,\n  timer,\n} from 'rxjs'\nimport {map, tap} from 'rxjs/operators'\n\nfunction getValue<T>(value: T): T extends () => infer U ? U : T {\n  return (typeof value === 'function' ? (value as () => any)() : value) as T extends () => infer U\n    ? U\n    : T\n}\n\ninterface ObservableState<T> {\n  didEmit: boolean\n  snapshot?: T\n  error?: unknown\n}\n\ninterface CacheRecord<T> {\n  observable: Observable<void>\n  state: {\n    didEmit: boolean\n    snapshot?: T\n    error?: unknown\n  }\n  getSnapshot: (initialValue: unknown) => T\n}\n\nconst cache = new WeakMap<Observable<any>, CacheRecord<any>>()\n\n/** @public */\nexport function useObservable<ObservableType extends Observable<any>>(\n  observable: ObservableType,\n  initialValue: ObservedValueOf<ObservableType> | (() => ObservedValueOf<ObservableType>),\n): ObservedValueOf<ObservableType>\n/** @public */\nexport function useObservable<ObservableType extends Observable<any>>(\n  observable: ObservableType,\n): undefined | ObservedValueOf<ObservableType>\n/** @public */\nexport function useObservable<ObservableType extends Observable<any>, InitialValue>(\n  observable: ObservableType,\n  initialValue: InitialValue | (() => InitialValue),\n): InitialValue | ObservedValueOf<ObservableType>\n/** @public */\nexport function useObservable<ObservableType extends Observable<any>, InitialValue>(\n  observable: ObservableType,\n  initialValue?: InitialValue | (() => InitialValue),\n): InitialValue | ObservedValueOf<ObservableType> {\n  const instance = useMemo(() => {\n    if (!cache.has(observable)) {\n      // This separate object is used as a stable reference to the cache entry's snapshot and error.\n      // It's used by the `getSnapshot` closure.\n      const state: ObservableState<ObservedValueOf<ObservableType>> = {\n        didEmit: false,\n      }\n      const entry: CacheRecord<ObservedValueOf<ObservableType>> = {\n        state,\n        observable: observable.pipe(\n          map((value) => ({snapshot: value, error: undefined})),\n          catchError((error) => of({snapshot: undefined, error})),\n          tap(({snapshot, error}) => {\n            state.didEmit = true\n            state.snapshot = snapshot\n            state.error = error\n          }),\n          // Note: any value or error emitted by the provided observable will be mapped to the cache entry's mutable state\n          // and the observable is thereafter only used as a notifier to call `onStoreChange`, hence the `void` return type.\n          map((value) => void value),\n          // Ensure that the cache entry is deleted when the observable completes or errors.\n          finalize(() => cache.delete(observable)),\n          share({resetOnRefCountZero: () => timer(0, asapScheduler)}),\n        ),\n        getSnapshot: (initialValue) => {\n          if (state.error) {\n            throw state.error\n          }\n          return (\n            state.didEmit ? state.snapshot : getValue(initialValue)\n          ) as ObservedValueOf<ObservableType>\n        },\n      }\n\n      // Eagerly subscribe to sync set `state.snapshot` to what the observable returns, and keep the observable alive until the component unmounts.\n      const subscription = entry.observable.subscribe()\n      subscription.unsubscribe()\n\n      cache.set(observable, entry)\n    }\n    return cache.get(observable)!\n  }, [observable])\n\n  const subscribe = useCallback(\n    (onStoreChange: () => void) => {\n      const subscription = instance.observable.subscribe(onStoreChange)\n      return () => {\n        subscription.unsubscribe()\n      }\n    },\n    [instance.observable],\n  )\n\n  return useSyncExternalStore<ObservedValueOf<ObservableType>>(\n    subscribe,\n    () => {\n      return instance.getSnapshot(initialValue)\n    },\n    typeof initialValue === 'undefined'\n      ? undefined\n      : () => getValue(initialValue) as ObservedValueOf<ObservableType>,\n  )\n}\n","import {observableCallback} from 'observable-callback'\nimport {useEffect, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {useEffectEvent} from 'use-effect-event'\n\n/** @public */\nexport function useObservableEvent<T, U>(\n  handleEvent: (arg: Observable<T>) => Observable<U>,\n): (arg: T) => void {\n  const [[calls$, call]] = useState(() => observableCallback<T>())\n\n  const onEvent = useEffectEvent((observable: Observable<T>) => handleEvent(observable))\n\n  useEffect(() => {\n    const subscription = calls$.pipe((observable) => onEvent(observable)).subscribe()\n    return () => subscription.unsubscribe()\n  }, [calls$])\n\n  return call\n}\n"],"names":["getValue","value","cache","WeakMap","useObservable","observable","initialValue","$","_c","has","state","didEmit","entry","pipe","map","_temp","catchError","_temp2","tap","t0","snapshot","error","error_0","_temp3","finalize","delete","share","resetOnRefCountZero","_temp4","getSnapshot","initialValue_0","subscribe","unsubscribe","set","get","instance","t1","onStoreChange","subscription_0","subscription","t2","t3","undefined","useSyncExternalStore","timer","asapScheduler","value_0","of","useObservableEvent","handleEvent","useState","calls$","call","onEvent","useEffectEvent","observable_0","useEffect","observableCallback"],"mappings":"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"}